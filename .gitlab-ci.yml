variables:
  SERVICE_NAME: rails-gambit
  SERVICE_IMAGE: registry.gitlab.com/rails_gambit/rails-gambit
  SERVICE_TAG: ${CI_COMMIT_SHORT_SHA}

stages:
  - build
  - tests
  - tagging
  - deploy

# MIXINS

.runner-image:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/ruby:alpine3.15

##### STAGES #####

# BUILD STAGE

build:image:
  extends: .runner-image
  stage: build
  script:
    - echo this is template for build script
  except:
    - tags # tags используются для перетегирования образов, а не для сборки

# TESTS STAGE

.test_job:
  extends: .runner-image
  stage: tests
  variables:
    RAILS_ENV: test
  cache:
    #key: gems_and_packages
    paths:
      - vendor/ruby
      - vendor/apk


tests:units:
  extends: .test_job
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/postgres:12
      alias: postgres
  variables:
    TEST_TYPE: units
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: 'postgresql://postgres@postgres/rails_gambit_test'
    DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: 'true'
  script:
    - mkdir -p vendor/apk
    - rm -rf /var/cache/apk
    - ln -s ${PWD}/vendor/apk /var/cache/apk
    - ln -s ${PWD}/vendor/apk /etc/apk/cache
    - apk add build-base tzdata postgresql-dev postgresql-client
    - bundle config set --local path 'vendor'
    - bundle install
    - cp config/database.yml.example config/database.yml
    - cp config/storage.yml.example config/storage.yml
    - rake db:create
    - rake db:migrate
    - rake db:seed
    - bundle exec rspec
  coverage: '/\(\d+.\d+\%\) covered/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
      junit: junits/rspec*.xml
    name: "coverage"
    paths:
      - coverage/*
      - junits/*

tests:ports:
  extends: .test_job
  variables:
    SCAN_TARGET: gambit.edu.rnds.pro
    ALLOWED_PORTS: 3
  script:
    - mkdir -p vendor/apk
    - rm -rf /var/cache/apk
    - ln -s ${PWD}/vendor/apk /var/cache/apk
    - ln -s ${PWD}/vendor/apk /etc/apk/cache
    - apk add curl nmap
    - ./scripts/scanports.sh
  only:
    - master
    - main

# TAGGING STAGE

.tagging:
  extends: .runner-image
  stage: tagging
  script:
    - echo this is template for tagging

tagging:tags:
  extends: .tagging
  variables:
    TAG: ${CI_COMMIT_TAG}
  environment:
    name: image/${CI_COMMIT_TAG}
  only:
    - tags
  except:
    - branches

tagging:branches:
  extends: .tagging
  variables:
    TAG: ${CI_COMMIT_REF_SLUG}
  environment:
    name: image/${CI_COMMIT_REF_SLUG}
  except:
    - /^feature.*$/
    - /^fix.*$/
    - /^hotfix.*$/
    - /^doc.*$/
    - tags

tagging:main:
  extends: .tagging
  variables:
    TAG: latest
  environment:
    name: image/latest
  only:
    - master
    - main

# DEPLOY STAGE

badges:
  extends: .runner-image
  stage: deploy
  allow_failure: true
  script:
    - echo release badges script
  only:
    - master
    - main

