variables:
  SERVICE_NAME: rails-gambit
  SERVICE_IMAGE: registry.gitlab.com/rails_gambit/rails-gambit
  SERVICE_TAG: ${CI_COMMIT_SHORT_SHA}

default:
  image: ruby:3.1.4-alpine3.19

stages:
  - build
  - test
  - tagging
  - deploy

# MIXINS

.runner-image:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/ruby:alpine3.15

##### STAGES #####

# BUILD STAGE

# build:
#   image: ruby:3.1.4-alpine3.19
#   stage: build
#   script:
#     - apk add -U --no-cache build-base openssl tzdata vim postgresql-dev postgresql-client yarn
#     - bundle config set --local deployment 'true'
#     - bundle install --no-cache
#     - yarn install
#   artifacts:
#     untracked: false
#     when: on_success
#     access: developer
#     expire_in: "2 hrs"

# # TESTS STAGE

rspec:
  stage: test
  variables:
    RAILS_ENV: test
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: 'true'

  script:
    - ls -Al
    - apk add -U --no-cache build-base openssl tzdata vim libpq-dev postgresql16 yarn
    - mkdir /run/postgresql
    - chown postgres:postgres /run/postgresql/
    - su postgres -
    - initdb
    - pg_ctl start -D /var/lib/postgresql/data
    - exit
    - bundle config set --local deployment 'true'
    - bundle install --no-cache
    - yarn install
    - bundle exec rails db:create
    - bundle exec rails db:migrate
    - bundle exec rspec --format RspecJunitFormatter --out rspec.xml
  artifacts:
    reports:
      junit: rspec.xml


# .test_job:
#   extends: .runner-image
#   stage: tests
#   variables:
#     RAILS_ENV: test
#   cache:
#     #key: gems_and_packages
#     paths:
#       - vendor/ruby
#       - vendor/apk


# tests:units:
#   extends: .test_job
#   services:
#     - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/postgres:12
#       alias: postgres
#   variables:
#     TEST_TYPE: units
#     POSTGRES_HOST_AUTH_METHOD: trust
#     DATABASE_URL: 'postgresql://postgres@postgres/rails_gambit_test'
#     DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: 'true'
#   script:
#     - mkdir -p vendor/apk
#     - rm -rf /var/cache/apk
#     - ln -s ${PWD}/vendor/apk /var/cache/apk
#     - ln -s ${PWD}/vendor/apk /etc/apk/cache
#     - apk add build-base tzdata postgresql-dev postgresql-client
#     - bundle config set --local path 'vendor'
#     - bundle install
#     - cp config/database.yml.example config/database.yml
#     - cp config/storage.yml.example config/storage.yml
#     - rake db:create
#     - rake db:migrate
#     - rake db:seed
#     - bundle exec rspec
#   coverage: '/\(\d+.\d+\%\) covered/'
#   artifacts:
#     reports:
#       junit: junits/rspec*.xml
#     name: "coverage"
#     paths:
#       - coverage/*
#       - junits/*

# tests:ports:
#   extends: .test_job
#   variables:
#     SCAN_TARGET: gambit.edu.rnds.pro
#     ALLOWED_PORTS: 3
#   script:
#     - mkdir -p vendor/apk
#     - rm -rf /var/cache/apk
#     - ln -s ${PWD}/vendor/apk /var/cache/apk
#     - ln -s ${PWD}/vendor/apk /etc/apk/cache
#     - apk add curl nmap
#     - ./scripts/scanports.sh
#   only:
#     - master
#     - main

# # TAGGING STAGE

# .tagging:
#   extends: .runner-image
#   stage: tagging
#   script:
#     - echo this is template for tagging

# tagging:tags:
#   extends: .tagging
#   variables:
#     TAG: ${CI_COMMIT_TAG}
#   environment:
#     name: image/${CI_COMMIT_TAG}
#   only:
#     - tags
#   except:
#     - branches

# tagging:branches:
#   extends: .tagging
#   variables:
#     TAG: ${CI_COMMIT_REF_SLUG}
#   environment:
#     name: image/${CI_COMMIT_REF_SLUG}
#   except:
#     - /^feature.*$/
#     - /^fix.*$/
#     - /^hotfix.*$/
#     - /^doc.*$/
#     - tags

# tagging:main:
#   extends: .tagging
#   variables:
#     TAG: latest
#   environment:
#     name: image/latest
#   only:
#     - master
#     - main

# # DEPLOY STAGE

# badges:
#   extends: .runner-image
#   stage: deploy
#   allow_failure: true
#   script:
#     - echo release badges script
#   only:
#     - master
#     - main

